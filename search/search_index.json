{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Optum Airflow Team For full documentation of Apache Airflow visit airflow.apache.org . For full documentation of Hashicorp Vault visit vaultproject.io . Introduction This is the documentation on how to connect HashiCorp Vault with Apache Airflow. The scope of this documentation is limited to using HashiCorp Vault Web UI to create secrets, get token and setting up Apache Airflow's configuration file. If you wish to use HashiCorp Vault CLI and Apache Airflow commands to do so, please refer to resources or HashiCorp Vault CLI for HashiCorp Vault CLI and Airflow Commands for Airflow commands. Documentation layout Home # The Documentation Homepage. Apache Airflow Setting # Setting for Airflow Configuration. Configuration # Details on Configuration Variables. HashiCorp Vault Get Token # Get Token Instruction. Create Secrets # Create Secrets Instruction. Resources # Resources and references","title":"Home"},{"location":"#welcome-to-optum-airflow-team","text":"For full documentation of Apache Airflow visit airflow.apache.org . For full documentation of Hashicorp Vault visit vaultproject.io .","title":"Welcome to Optum Airflow Team"},{"location":"#introduction","text":"This is the documentation on how to connect HashiCorp Vault with Apache Airflow. The scope of this documentation is limited to using HashiCorp Vault Web UI to create secrets, get token and setting up Apache Airflow's configuration file. If you wish to use HashiCorp Vault CLI and Apache Airflow commands to do so, please refer to resources or HashiCorp Vault CLI for HashiCorp Vault CLI and Airflow Commands for Airflow commands.","title":"Introduction"},{"location":"#documentation-layout","text":"Home # The Documentation Homepage. Apache Airflow Setting # Setting for Airflow Configuration. Configuration # Details on Configuration Variables. HashiCorp Vault Get Token # Get Token Instruction. Create Secrets # Create Secrets Instruction. Resources # Resources and references","title":"Documentation layout"},{"location":"configuration/","text":"Configuration For full documentation of Apache Airflow visit airflow.apache.org . Token Info Prefer to Get Token for further details on how to get token on Hashicorp Vault Web UI Verify Navigate to your $AIRFLOWHOME and verify if ca-certificate file is in the home directory The absolute path to ca-certificate file: /home/airfdev/ca-bundle.crt This is the value of your verify in backend_kwargs environment variable. Hashicorp Vault Secrets Backend To enable Hashicorp Vault to retrieve Airflow connection/variable, specify VaultBackend as the backend in [secrets] section of airflow.cfg. Here is a sample configuration: [secrets] backend = airflow.providers.hashicorp.secrets.vault.VaultBackend backend_kwargs = {\"connections_path\": \"connections\", \"variables_path\": \"variables\", \"mount_point\": \"airflow\", \"url\": \"http://127.0.0.1:8200\"} Here is samples of correcsponding environment variables: export AIRFLOW__SECRETS__BACKEND=airflow.providers.hashicorp.secrets.vault.VaultBackend export VAULT_TOKEN=\"token\" export AIRFLOW__SECRET__BACKEND_KWARGS={\\\"token\\\": \\\"${VAULT_TOKEN}\\\", \\\"connections_path\\\": \\\"connections\\\", \\\"vairables_path\\\": \\\"variables\\\", \\\"mount_point\\\": \\\"airflow/\\\", \\\"url\\\": \\\"https://127.0.0.1:8200/\\\"} Info Prefer to Create Secret for further details on the values of mount_point , namespace , and config_path . For Vault running with self signed certificates Add \u201cverify\u201d: \u201cabsolute path to ca-certificate file\u201d The default KV version engine is 2. Optional lookup Optionally connections, variables, or config may be looked up exclusive of each other or in any combination. This will prevent requests being sent to Vault for the excluded type. If you want to look up some and not others in Vault you may do so by setting the relevant *_path parameter of the ones to be excluded as null. For example, if you want to set parameter config_path to \"mui\", and not look up variables, your configuration file should look like this: [secrets] backend = airflow.providers.hashicorp.secrets.vault.VaultBackend backend_kwargs = {\"connections_path\": null, \"variables_path\": null, \"mount_point\": \"airflow\", \"config_path\": \"mui\", \"url\": \"http://127.0.0.1:8200\"} or like this for corresponding environment variables: export AIRFLOW__SECRETS__BACKEND=airflow.providers.hashicorp.secrets.vault.VaultBackend export VAULT_TOKEN=\"token\" export AIRFLOW__SECRET__BACKEND_KWARGS={\\\"token\\\": \\\"${VAULT_TOKEN}\\\", \\\"connections_path\\\": null, \\\"vairables_path\\\": null, \\\"config_path\\\": \\\"mui\\\", \\\"mount_point\\\": \\\"DEV/dev\\\", \\\"url\\\": \\\"https://pam-dev.uhc.com/\\\", \\\"verify\\: \\\"/home/airfdev/ca-bundle.crt\\\", \\\"namespace\\\": \\\"OPTUM/APP/AIRFLOW\\\"} _SECRET Config Options The purpose of _SECRET Config Options is to not store passwords and sensitive information in plain text files. _SECRET config options can be set using a corresponding environment variable. For example, AIRFLOW__DATABASE__SQL_ALCHEMY_CONN is saved in plain text in configuration file: export AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=mysql://[dbuser]:[dbPassword]@[hostname]:3306/[dbname] You can use set a corresponding environment variable using _SECRET Config Options: export AIRFLOW__DATABASE__SQL_ALCHEMY_CONN_SECRET=\"AIRFLOW__DATABASE__SQL_ALCHEMY_CONN\" Configuration Reference Refer to Configuration Reference for the list of all the available Airflow configurations that you can set in airflow.cfg file or using environment variables.","title":"Configuration"},{"location":"configuration/#configuration","text":"For full documentation of Apache Airflow visit airflow.apache.org .","title":"Configuration"},{"location":"configuration/#token","text":"Info Prefer to Get Token for further details on how to get token on Hashicorp Vault Web UI","title":"Token"},{"location":"configuration/#verify","text":"Navigate to your $AIRFLOWHOME and verify if ca-certificate file is in the home directory The absolute path to ca-certificate file: /home/airfdev/ca-bundle.crt This is the value of your verify in backend_kwargs environment variable.","title":"Verify"},{"location":"configuration/#hashicorp-vault-secrets-backend","text":"To enable Hashicorp Vault to retrieve Airflow connection/variable, specify VaultBackend as the backend in [secrets] section of airflow.cfg. Here is a sample configuration: [secrets] backend = airflow.providers.hashicorp.secrets.vault.VaultBackend backend_kwargs = {\"connections_path\": \"connections\", \"variables_path\": \"variables\", \"mount_point\": \"airflow\", \"url\": \"http://127.0.0.1:8200\"} Here is samples of correcsponding environment variables: export AIRFLOW__SECRETS__BACKEND=airflow.providers.hashicorp.secrets.vault.VaultBackend export VAULT_TOKEN=\"token\" export AIRFLOW__SECRET__BACKEND_KWARGS={\\\"token\\\": \\\"${VAULT_TOKEN}\\\", \\\"connections_path\\\": \\\"connections\\\", \\\"vairables_path\\\": \\\"variables\\\", \\\"mount_point\\\": \\\"airflow/\\\", \\\"url\\\": \\\"https://127.0.0.1:8200/\\\"} Info Prefer to Create Secret for further details on the values of mount_point , namespace , and config_path . For Vault running with self signed certificates Add \u201cverify\u201d: \u201cabsolute path to ca-certificate file\u201d The default KV version engine is 2.","title":"Hashicorp Vault Secrets Backend"},{"location":"configuration/#optional-lookup","text":"Optionally connections, variables, or config may be looked up exclusive of each other or in any combination. This will prevent requests being sent to Vault for the excluded type. If you want to look up some and not others in Vault you may do so by setting the relevant *_path parameter of the ones to be excluded as null. For example, if you want to set parameter config_path to \"mui\", and not look up variables, your configuration file should look like this: [secrets] backend = airflow.providers.hashicorp.secrets.vault.VaultBackend backend_kwargs = {\"connections_path\": null, \"variables_path\": null, \"mount_point\": \"airflow\", \"config_path\": \"mui\", \"url\": \"http://127.0.0.1:8200\"} or like this for corresponding environment variables: export AIRFLOW__SECRETS__BACKEND=airflow.providers.hashicorp.secrets.vault.VaultBackend export VAULT_TOKEN=\"token\" export AIRFLOW__SECRET__BACKEND_KWARGS={\\\"token\\\": \\\"${VAULT_TOKEN}\\\", \\\"connections_path\\\": null, \\\"vairables_path\\\": null, \\\"config_path\\\": \\\"mui\\\", \\\"mount_point\\\": \\\"DEV/dev\\\", \\\"url\\\": \\\"https://pam-dev.uhc.com/\\\", \\\"verify\\: \\\"/home/airfdev/ca-bundle.crt\\\", \\\"namespace\\\": \\\"OPTUM/APP/AIRFLOW\\\"}","title":"Optional lookup"},{"location":"configuration/#_secret-config-options","text":"The purpose of _SECRET Config Options is to not store passwords and sensitive information in plain text files. _SECRET config options can be set using a corresponding environment variable. For example, AIRFLOW__DATABASE__SQL_ALCHEMY_CONN is saved in plain text in configuration file: export AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=mysql://[dbuser]:[dbPassword]@[hostname]:3306/[dbname] You can use set a corresponding environment variable using _SECRET Config Options: export AIRFLOW__DATABASE__SQL_ALCHEMY_CONN_SECRET=\"AIRFLOW__DATABASE__SQL_ALCHEMY_CONN\"","title":"_SECRET Config Options"},{"location":"configuration/#configuration-reference","text":"Refer to Configuration Reference for the list of all the available Airflow configurations that you can set in airflow.cfg file or using environment variables.","title":"Configuration Reference"},{"location":"createSecrets/","text":"Create Secrets on Hashicorp Vault Web UI Step 1: Sign in to Vault Access pam-dev.uhc.com on a web browser (the follwing browsers are supported: Chrome, Firefox, Safari, and Microsoft Edge) and sign in to Vault. Fill out Namespace with \"/OPTUM/APP/AIRFLOW\" . Note: This is namespace value in Airflow configuration. Choose LDAP method. Fill out your Username and Password . Click on Sign In button. Step 2: Switch to your target Namespace After signing in to Vault, you will see the following main page of the Vault Web UI: Click on the arrow down icon next to AIRFLOW , then a drop-down menu will appear. Click on Manage namespaces . After clicking on Manage namespaces , a list of Namespaces will show up. Click on ... (three horizontal dots icon) next to your target Namespace and choose Switch to Namespace . Step 3: Choose your engine After switching to your target Namespace, a list of engines will show up. Click on your target engine. Step 4: Create a secret Click on Create secret to create a new secret. Fill out secret path and Secret data . Note Each secret has its own unique path generated by providing \"[parentFolder]/[secretName]\" . This parentFolder is used as config_path in Airflow configuration. Key of Secret data must be \"value\" for all secrets. Click on Save button. Step 5: Continue creating remaining secrets Click on [parentFolder] on the top left path to navigate to the secret's parent folder. Click on Creat secret to create another secret. Similar to step 4, fill out secret path and secret data boxes. Note parentFolder must be the same as the previous secret's parentFolder. The secret path has to be in form \"[parentFolder]/[secretName]\" . Secret Key is \"value\" for all secrets. 4. Continue creating remaining secrets. Examples of results An example of correct result of creating secrets: Each secret has its own unique path. An example of wrong result of creating secrets: All screts are in the same path which is \"/[config_path]\". Secrets are in json format with key is [secretName].","title":"Create Secrets"},{"location":"createSecrets/#create-secrets-on-hashicorp-vault-web-ui","text":"","title":"Create Secrets on Hashicorp Vault Web UI"},{"location":"createSecrets/#step-1-sign-in-to-vault","text":"Access pam-dev.uhc.com on a web browser (the follwing browsers are supported: Chrome, Firefox, Safari, and Microsoft Edge) and sign in to Vault. Fill out Namespace with \"/OPTUM/APP/AIRFLOW\" . Note: This is namespace value in Airflow configuration. Choose LDAP method. Fill out your Username and Password . Click on Sign In button.","title":"Step 1: Sign in to Vault"},{"location":"createSecrets/#step-2-switch-to-your-target-namespace","text":"After signing in to Vault, you will see the following main page of the Vault Web UI: Click on the arrow down icon next to AIRFLOW , then a drop-down menu will appear. Click on Manage namespaces . After clicking on Manage namespaces , a list of Namespaces will show up. Click on ... (three horizontal dots icon) next to your target Namespace and choose Switch to Namespace .","title":"Step 2: Switch to your target Namespace"},{"location":"createSecrets/#step-3-choose-your-engine","text":"After switching to your target Namespace, a list of engines will show up. Click on your target engine.","title":"Step 3: Choose your engine"},{"location":"createSecrets/#step-4-create-a-secret","text":"Click on Create secret to create a new secret. Fill out secret path and Secret data . Note Each secret has its own unique path generated by providing \"[parentFolder]/[secretName]\" . This parentFolder is used as config_path in Airflow configuration. Key of Secret data must be \"value\" for all secrets. Click on Save button.","title":"Step 4: Create a secret"},{"location":"createSecrets/#step-5-continue-creating-remaining-secrets","text":"Click on [parentFolder] on the top left path to navigate to the secret's parent folder. Click on Creat secret to create another secret. Similar to step 4, fill out secret path and secret data boxes. Note parentFolder must be the same as the previous secret's parentFolder. The secret path has to be in form \"[parentFolder]/[secretName]\" . Secret Key is \"value\" for all secrets. 4. Continue creating remaining secrets.","title":"Step 5: Continue creating remaining secrets"},{"location":"createSecrets/#examples-of-results","text":"","title":"Examples of results"},{"location":"createSecrets/#an-example-of-correct-result-of-creating-secrets","text":"Each secret has its own unique path.","title":"An example of correct result of creating secrets:"},{"location":"createSecrets/#an-example-of-wrong-result-of-creating-secrets","text":"All screts are in the same path which is \"/[config_path]\". Secrets are in json format with key is [secretName].","title":"An example of wrong result of creating secrets:"},{"location":"getToken/","text":"How to Get Token Step 1: Sign in to Vault Access pam-dev.uhc.com on a web browser (the follwing browsers are supported: Chrome, Firefox, Safari, and Microsoft Edge) and sign in to Vault. Fill out Namespace with \"/OPTUM/APP/AIRFLOW\" . Note: This is namespace value in Airflow configuration. Choose LDAP method. Fill out your Username and Password . Click on Sign In button. Step 2: Copy Token Click on person icon and choose Copy token Step 3: Paste the Token You now can paste the token in your target file. Note Token is used as value of VAULT_TOKEN environment variable in Airflow's configuration file.","title":"Get Token"},{"location":"getToken/#how-to-get-token","text":"","title":"How to Get Token"},{"location":"getToken/#step-1-sign-in-to-vault","text":"Access pam-dev.uhc.com on a web browser (the follwing browsers are supported: Chrome, Firefox, Safari, and Microsoft Edge) and sign in to Vault. Fill out Namespace with \"/OPTUM/APP/AIRFLOW\" . Note: This is namespace value in Airflow configuration. Choose LDAP method. Fill out your Username and Password . Click on Sign In button.","title":"Step 1: Sign in to Vault"},{"location":"getToken/#step-2-copy-token","text":"Click on person icon and choose Copy token","title":"Step 2: Copy Token"},{"location":"getToken/#step-3-paste-the-token","text":"You now can paste the token in your target file. Note Token is used as value of VAULT_TOKEN environment variable in Airflow's configuration file.","title":"Step 3: Paste the Token"},{"location":"resources/","text":"Resources Useful Airflow Commands airflow cheat-sheet [-h] [-v] - Display cheat sheet. airflow config [-h] COMMAND - View configuration. airflow db check [-h] - Check if the database can be reached. airflow db init [-h] - Initialize the metadata database. Visit Airflow Commands for more airflow commands. Useful Vault Commands (CLI) vault namespace list - List all namespaces. vault token create - Create a new token. vault token renew - Renew a token lease. vault secrets enable database - Enable a secrets engine. vault secrets list - List all secrets engines. vault kv put [secret path] value=[secret value] - Store a secret.","title":"Resources"},{"location":"resources/#resources","text":"","title":"Resources"},{"location":"resources/#useful-airflow-commands","text":"airflow cheat-sheet [-h] [-v] - Display cheat sheet. airflow config [-h] COMMAND - View configuration. airflow db check [-h] - Check if the database can be reached. airflow db init [-h] - Initialize the metadata database. Visit Airflow Commands for more airflow commands.","title":"Useful Airflow Commands"},{"location":"resources/#useful-vault-commands-cli","text":"vault namespace list - List all namespaces. vault token create - Create a new token. vault token renew - Renew a token lease. vault secrets enable database - Enable a secrets engine. vault secrets list - List all secrets engines. vault kv put [secret path] value=[secret value] - Store a secret.","title":"Useful Vault Commands (CLI)"},{"location":"setting/","text":"Setting airflow.cfg The first time you run Airflow, it will create a file called airflow.cfg in your $AIRFLOW_HOME directory (~/airflow by default). This file contains Airflow\u2019s configuration and you can edit it to change any of the settings. You can also set options with environment variables by using this format: AIRFLOW__{SECTION}__{KEY} (note the double underscores). For example, the metadata database connection string can either be set in airflow.cfg like this: [database] sql_alchemy_conn = my_conn_string or by creating a corresponding environment variable: export AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=my_conn_string Overwrite airflow.cfg The airflow.cfg comes from the default installation and stays unchanged. We can create a new configuration and create new environment variables in it to overwrite airflow.cfg Create a new configuration file in the same directory as airflow.cfg $ touch afmui_airflow.cfg 2. Open and update airflow setup sh file ( airtdp_env_setup.sh ) $ vim airtdp_env_setup.sh Update source file in AIRFLOW CONFIGURATION section to afmui_airflow.cfg : From To: Add environment variables in afmui_airflow.cfg configuration file","title":"Setting"},{"location":"setting/#setting","text":"","title":"Setting"},{"location":"setting/#airflowcfg","text":"The first time you run Airflow, it will create a file called airflow.cfg in your $AIRFLOW_HOME directory (~/airflow by default). This file contains Airflow\u2019s configuration and you can edit it to change any of the settings. You can also set options with environment variables by using this format: AIRFLOW__{SECTION}__{KEY} (note the double underscores). For example, the metadata database connection string can either be set in airflow.cfg like this: [database] sql_alchemy_conn = my_conn_string or by creating a corresponding environment variable: export AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=my_conn_string","title":"airflow.cfg"},{"location":"setting/#overwrite-airflowcfg","text":"The airflow.cfg comes from the default installation and stays unchanged. We can create a new configuration and create new environment variables in it to overwrite airflow.cfg Create a new configuration file in the same directory as airflow.cfg $ touch afmui_airflow.cfg 2. Open and update airflow setup sh file ( airtdp_env_setup.sh ) $ vim airtdp_env_setup.sh Update source file in AIRFLOW CONFIGURATION section to afmui_airflow.cfg : From To: Add environment variables in afmui_airflow.cfg configuration file","title":"Overwrite airflow.cfg"}]}